/**
 * Comprehensive vulnerability categories and detection patterns
 */

export interface VulnerabilityCategory {
  id: string;
  name: string;
  description: string;
  swc_ids: string[];
  cwe_ids: string[];
  severity_range: string[];
  detection_patterns: string[];
  examples: string[];
}

export const VULNERABILITY_CATEGORIES: VulnerabilityCategory[] = [
  // Security Issues
  {
    id: "reentrancy",
    name: "Reentrancy Vulnerabilities",
    description: "External calls to untrusted contracts that can lead to state manipulation",
    swc_ids: ["SWC-107"],
    cwe_ids: ["CWE-841"],
    severity_range: ["medium", "high", "critical"],
    detection_patterns: [
      "external calls before state changes",
      "call.value() without reentrancy protection",
      "send() or transfer() in loops",
      "low-level calls (.call, .delegatecall, .staticcall)",
      "missing reentrancy guards",
      "state changes after external calls"
    ],
    examples: [
      "function withdraw() { msg.sender.call{value: balance}(''); balance = 0; }",
      "Missing nonReentrant modifier on state-changing functions"
    ]
  },
  {
    id: "integer_overflow",
    name: "Integer Overflow/Underflow",
    description: "Arithmetic operations that can overflow or underflow without proper checks",
    swc_ids: ["SWC-101"],
    cwe_ids: ["CWE-190", "CWE-191"],
    severity_range: ["medium", "high", "critical"],
    detection_patterns: [
      "arithmetic operations without SafeMath",
      "unchecked arithmetic in Solidity 0.8+",
      "multiplication before division",
      "addition/subtraction without bounds checking",
      "exponential operations",
      "casting between integer types"
    ],
    examples: [
      "balance += amount; // without overflow check",
      "price * quantity / 100; // precision loss",
      "unchecked { x = y + z; } // explicit bypass"
    ]
  },
  {
    id: "unchecked_calls",
    name: "Unchecked Call Return Values",
    description: "External calls whose return values are not properly checked",
    swc_ids: ["SWC-104"],
    cwe_ids: ["CWE-703"],
    severity_range: ["low", "medium", "high"],
    detection_patterns: [
      "call() without return value check",
      "send() without return value check",
      "delegatecall() without return value check",
      "external function calls without try/catch",
      "ERC20 transfer() calls without checking return",
      "low-level assembly calls"
    ],
    examples: [
      "address.call(data); // return value ignored",
      "token.transfer(to, amount); // return value not checked"
    ]
  },
  {
    id: "unprotected_withdrawal",
    name: "Unprotected Ether Withdrawal",
    description: "Functions that allow unauthorized withdrawal of contract funds",
    swc_ids: ["SWC-105"],
    cwe_ids: ["CWE-284"],
    severity_range: ["high", "critical"],
    detection_patterns: [
      "withdrawal functions without access control",
      "selfdestruct() without proper authorization",
      "transfer/send to arbitrary addresses",
      "missing onlyOwner or similar modifiers",
      "withdraw functions callable by anyone",
      "emergency withdrawal without proper checks"
    ],
    examples: [
      "function withdraw() { payable(msg.sender).transfer(address(this).balance); }",
      "selfdestruct(payable(msg.sender)); // without access control"
    ]
  },
  {
    id: "tx_origin_auth",
    name: "Authorization through tx.origin",
    description: "Using tx.origin for authorization instead of msg.sender",
    swc_ids: ["SWC-115"],
    cwe_ids: ["CWE-346"],
    severity_range: ["medium", "high"],
    detection_patterns: [
      "require(tx.origin == owner)",
      "if (tx.origin == address)",
      "authorization logic using tx.origin",
      "access control based on tx.origin"
    ],
    examples: [
      "require(tx.origin == owner); // vulnerable to phishing",
      "if (tx.origin == admin) { /* logic */ }"
    ]
  },

  // Gas Optimization Issues
  {
    id: "inefficient_loops",
    name: "Inefficient Loops and Storage Access",
    description: "Loops and storage operations that consume excessive gas",
    swc_ids: [],
    cwe_ids: ["CWE-400"],
    severity_range: ["low", "medium"],
    detection_patterns: [
      "unbounded loops",
      "storage reads/writes in loops",
      "external calls in loops",
      "array operations without gas limits",
      "nested loops",
      "loops over dynamic arrays",
      "repeated storage variable access"
    ],
    examples: [
      "for (uint i = 0; i < users.length; i++) { user[i].balance = 0; }",
      "for (uint i = 0; i < amount; i++) { transfer(to, 1); }"
    ]
  },
  {
    id: "redundant_computations",
    name: "Redundant Computations",
    description: "Unnecessary calculations that waste gas",
    swc_ids: [],
    cwe_ids: [],
    severity_range: ["low"],
    detection_patterns: [
      "repeated expensive calculations",
      "redundant keccak256 calls",
      "unnecessary type conversions",
      "recalculating constants",
      "duplicate condition checks",
      "unnecessary memory allocations"
    ],
    examples: [
      "keccak256(abi.encodePacked(x)) called multiple times",
      "uint256(uint8(x)) for already uint8 values"
    ]
  },
  {
    id: "suboptimal_data_structures",
    name: "Suboptimal Data Structures",
    description: "Inefficient use of data structures and storage layout",
    swc_ids: [],
    cwe_ids: [],
    severity_range: ["low", "medium"],
    detection_patterns: [
      "mapping vs array inefficiency",
      "struct packing opportunities",
      "unnecessary storage variables",
      "inefficient data types",
      "poor storage slot utilization",
      "redundant data storage"
    ],
    examples: [
      "struct { uint8 a; uint256 b; uint8 c; } // poor packing",
      "using array when mapping would be more efficient"
    ]
  },
  {
    id: "missing_function_modifiers",
    name: "Missing View/Pure Function Modifiers",
    description: "Functions that don't modify state but lack view/pure modifiers",
    swc_ids: [],
    cwe_ids: [],
    severity_range: ["low"],
    detection_patterns: [
      "functions that only read state without view",
      "functions with no state access without pure",
      "getter functions without view modifier",
      "calculation functions without pure",
      "missing constant/immutable keywords"
    ],
    examples: [
      "function getBalance() returns (uint) { return balance; } // missing view",
      "function calculate(uint a, uint b) returns (uint) { return a + b; } // missing pure"
    ]
  },

  // Code Quality Issues
  {
    id: "unused_code",
    name: "Unused Variables and Functions",
    description: "Dead code that increases contract size and deployment costs",
    swc_ids: [],
    cwe_ids: [],
    severity_range: ["low"],
    detection_patterns: [
      "unused function parameters",
      "unused local variables",
      "unused state variables",
      "unused imports",
      "unreachable code",
      "unused events or modifiers"
    ],
    examples: [
      "function transfer(address to, uint amount, bool flag) { /* flag unused */ }",
      "uint256 private unusedVar;"
    ]
  },
  {
    id: "missing_error_messages",
    name: "Missing Error Messages",
    description: "Require statements and reverts without descriptive error messages",
    swc_ids: [],
    cwe_ids: [],
    severity_range: ["low"],
    detection_patterns: [
      "require() without error message",
      "revert() without custom error",
      "assert() statements",
      "unclear error messages",
      "missing custom errors (Solidity 0.8.4+)"
    ],
    examples: [
      "require(amount > 0); // missing error message",
      "require(msg.sender == owner, 'Not owner'); // good practice"
    ]
  },
  {
    id: "naming_conventions",
    name: "Inconsistent Naming Conventions",
    description: "Code that doesn't follow Solidity style guidelines",
    swc_ids: [],
    cwe_ids: [],
    severity_range: ["low"],
    detection_patterns: [
      "inconsistent variable naming",
      "non-standard function naming",
      "inconsistent constant naming",
      "poor contract naming",
      "misleading variable names",
      "abbreviated names without clarity"
    ],
    examples: [
      "uint256 bal; // should be balance",
      "function getOwner() vs function owner() // inconsistent getters"
    ]
  },
  {
    id: "missing_documentation",
    name: "Lack of Documentation",
    description: "Missing or insufficient code documentation",
    swc_ids: [],
    cwe_ids: [],
    severity_range: ["low"],
    detection_patterns: [
      "missing NatSpec comments",
      "undocumented complex functions",
      "missing parameter descriptions",
      "undocumented contract purpose",
      "missing return value documentation",
      "lack of implementation comments"
    ],
    examples: [
      "function complexCalculation(uint a, uint b) { /* no documentation */ }",
      "// Missing @param and @return NatSpec tags"
    ]
  }
];

/**
 * Get all vulnerability categories organized by type
 */
export function getVulnerabilityCategoriesByType() {
  return {
    security: VULNERABILITY_CATEGORIES.filter(cat => 
      ['reentrancy', 'integer_overflow', 'unchecked_calls', 'unprotected_withdrawal', 'tx_origin_auth'].includes(cat.id)
    ),
    gas_optimization: VULNERABILITY_CATEGORIES.filter(cat => 
      ['inefficient_loops', 'redundant_computations', 'suboptimal_data_structures', 'missing_function_modifiers'].includes(cat.id)
    ),
    code_quality: VULNERABILITY_CATEGORIES.filter(cat => 
      ['unused_code', 'missing_error_messages', 'naming_conventions', 'missing_documentation'].includes(cat.id)
    )
  };
}

/**
 * Generate detection patterns for AI prompt
 */
export function generateDetectionPrompt(): string {
  const categories = getVulnerabilityCategoriesByType();
  
  let prompt = `## COMPREHENSIVE VULNERABILITY DETECTION CATEGORIES

### SECURITY ISSUES (Priority: High)
`;

  categories.security.forEach(cat => {
    prompt += `
**${cat.name} (${cat.swc_ids.join(', ')})**
- Description: ${cat.description}
- Detection patterns: ${cat.detection_patterns.join(', ')}
- Severity range: ${cat.severity_range.join(', ')}
`;
  });

  prompt += `
### GAS OPTIMIZATION ISSUES (Priority: Medium)
`;

  categories.gas_optimization.forEach(cat => {
    prompt += `
**${cat.name}**
- Description: ${cat.description}
- Detection patterns: ${cat.detection_patterns.join(', ')}
- Severity range: ${cat.severity_range.join(', ')}
`;
  });

  prompt += `
### CODE QUALITY ISSUES (Priority: Low)
`;

  categories.code_quality.forEach(cat => {
    prompt += `
**${cat.name}**
- Description: ${cat.description}
- Detection patterns: ${cat.detection_patterns.join(', ')}
- Severity range: ${cat.severity_range.join(', ')}
`;
  });

  return prompt;
}

/**
 * Map finding to appropriate SWC/CWE IDs
 */
export function mapFindingToStandards(category: string, description: string): { swc_id?: string; cwe_id?: string } {
  const cat = VULNERABILITY_CATEGORIES.find(c => 
    c.id === category.toLowerCase().replace(/\s+/g, '_') || 
    c.name.toLowerCase() === category.toLowerCase()
  );
  
  if (cat) {
    return {
      swc_id: cat.swc_ids[0],
      cwe_id: cat.cwe_ids[0]
    };
  }
  
  return {};
}