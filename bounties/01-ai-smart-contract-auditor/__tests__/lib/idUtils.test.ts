import { validateId, isValidId, createIdValidationError, sanitizeId } from '../../lib/idUtils';

describe('idUtils', () => {
  describe('validateId', () => {
    it('should validate valid UUIDs', () => {
      const validUuids = [
        '550e8400-e29b-41d4-a716-446655440000',
        '6ba7b810-9dad-11d1-80b4-00c04fd430c8',
        '6ba7b811-9dad-11d1-80b4-00c04fd430c8',
        'ffffffff-ffff-ffff-ffff-ffffffffffff',
        '00000000-0000-0000-0000-000000000000',
      ];

      validUuids.forEach(uuid => {
        const result = validateId(uuid);
        expect(result.isValid).toBe(true);
        expect(result.type).toBe('uuid');
        expect(result.error).toBeUndefined();
      });
    });

    it('should validate valid cuids', () => {
      const validCuids = [
        'cjld2cyuq0000t3rmniod1foy',
        'cjld2cyuq0001t3rmniod1foz',
        'cjld2cyuq0002t3rmniod1fp0',
        // Note: These are example cuids. In real tests, you'd use actual cuid values
        // Generated by cuid2.createId()
      ];

      // Since cuid generation is dynamic, let's test with generated cuids
      const { createId } = require('@paralleldrive/cuid2');
      const generatedCuids = [createId(), createId(), createId()];

      generatedCuids.forEach(cuid => {
        const result = validateId(cuid);
        expect(result.isValid).toBe(true);
        expect(result.type).toBe('cuid');
        expect(result.error).toBeUndefined();
      });
    });

    it('should reject invalid IDs', () => {
      const invalidIds = [
        'not-a-valid-id',
        'invalid-uuid-format',
        '550e8400-e29b-41d4-a716-44665544000', // too short
        '550e8400-e29b-41d4-a716-4466554400000', // too long
        'gggggggg-gggg-gggg-gggg-gggggggggggg', // invalid characters
        '   ', // only whitespace
      ];

      invalidIds.forEach(id => {
        const result = validateId(id);
        expect(result.isValid).toBe(false);
        expect(result.error).toBeDefined();
        expect(result.type).toBeUndefined();
      });
    });

    it('should handle null and undefined inputs', () => {
      const invalidInputs = [null, undefined] as any[];

      invalidInputs.forEach(input => {
        const result = validateId(input);
        expect(result.isValid).toBe(false);
        expect(result.error).toContain('ID is required and must be a string');
        expect(result.type).toBeUndefined();
      });
    });

    it('should trim whitespace from IDs', () => {
      const uuidWithWhitespace = '  550e8400-e29b-41d4-a716-446655440000  ';
      const result = validateId(uuidWithWhitespace);
      
      expect(result.isValid).toBe(true);
      expect(result.type).toBe('uuid');
    });

    it('should handle empty strings', () => {
      const result = validateId('');
      expect(result.isValid).toBe(false);
      expect(result.error).toBe('ID is required and must be a string');
    });
  });

  describe('isValidId', () => {
    it('should return true for valid UUIDs', () => {
      const validUuid = '550e8400-e29b-41d4-a716-446655440000';
      expect(isValidId(validUuid)).toBe(true);
    });

    it('should return true for valid cuids', () => {
      const { createId } = require('@paralleldrive/cuid2');
      const validCuid = createId();
      expect(isValidId(validCuid)).toBe(true);
    });

    it('should return false for invalid IDs', () => {
      const invalidIds = [
        'not-a-valid-id',
        'invalid-format',
        '',
        null as any,
        undefined as any,
      ];

      invalidIds.forEach(id => {
        expect(isValidId(id)).toBe(false);
      });
    });
  });

  describe('createIdValidationError', () => {
    it('should create error response for invalid IDs', () => {
      const invalidId = 'not-a-valid-id';
      const errorResponse = createIdValidationError(invalidId);
      
      expect(errorResponse.error).toBe('ID must be a valid UUID or cuid format');
      expect(errorResponse.status).toBe(400);
    });

    it('should handle already valid IDs', () => {
      const validId = '550e8400-e29b-41d4-a716-446655440000';
      const errorResponse = createIdValidationError(validId);
      
      expect(errorResponse.error).toBe('Unknown ID validation error');
      expect(errorResponse.status).toBe(400);
    });

    it('should handle null inputs', () => {
      const errorResponse = createIdValidationError(null as any);
      
      expect(errorResponse.error).toContain('ID is required and must be a string');
      expect(errorResponse.status).toBe(400);
    });
  });

  describe('sanitizeId', () => {
    it('should sanitize valid UUIDs', () => {
      const uuid = '  550e8400-e29b-41d4-a716-446655440000  ';
      const sanitized = sanitizeId(uuid);
      
      expect(sanitized).toBe('550e8400-e29b-41d4-a716-446655440000');
    });

    it('should sanitize valid cuids', () => {
      const { createId } = require('@paralleldrive/cuid2');
      const cuid = `  ${createId()}  `;
      const sanitized = sanitizeId(cuid);
      
      expect(sanitized).toBe(cuid.trim());
    });

    it('should throw for invalid IDs', () => {
      const invalidIds = [
        'not-a-valid-id',
        'invalid-format',
        '',
        null as any,
        undefined as any,
      ];

      invalidIds.forEach(id => {
        expect(() => sanitizeId(id)).toThrow();
      });
    });
  });
});